
case = board.final_state()

        #Player 1 Win
        if case == 1:
            return 10 + depth, None #eval, move
        #Player 2 Win
        if case not in (' ',"draw"):
            return -10 - depth, None
        #Draw
        if board.is_full():
            return 0, None
        if depth == 0:
            return None, None
        
        global boards
        boards += 1
        
        best_move = None
        empty_sqrs = board.get_empty_sqrs()
        eval = None

        for (row, col) in empty_sqrs:
            temp_board = copy.deepcopy(board)
            temp_board.mark_sqr(row, col, self.player % 2 + 1)
            _,eval = self.minimax(temp_board, depth - 1, False, alpha, beta)[0]
            
            if (eval is not None and (eval > alpha if maximize else eval < beta)):
                if maximize:
                    alpha = eval
                else:
                    beta = eval
                if (alpha != -inf and beta != inf and alpha >= beta if maximize else beta >= alpha):
                    break
                best_move = row, col

            if maximize:
                return alpha, best_move
                
            return beta, best_move